// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Program {
    id        String   @id @default(cuid())
    name      String
    shorthand String
    college   String
    univ      String
    users     User[]
    createdAt DateTime @default(now())
}

model Curriculum {
    id          String     @id @default(cuid())
    curricUnits Int
    userId      String     @unique
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    sems        Semester[]
    createdAt   DateTime   @default(now())

    @@index([userId])
}

model Semester {
    id           String      @id @default(cuid())
    semUnits     Int
    curriculum   Curriculum? @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
    curriculumId String
    courses      Course[]
    createdAt    DateTime    @default(now())

    @@index([curriculumId])
}

model Course {
    id           String         @id @default(cuid())
    code         String
    title        String?        @db.Text
    course_units String
    prereqs      Prerequisite[] @relation("post")
    postreqs     Prerequisite[] @relation("pre")
    createdAt    DateTime       @default(now())
    semester     Semester?      @relation(fields: [semesterId], references: [id], onDelete: Cascade)
    semesterId   String?

    @@index([semesterId])
}

model Prerequisite {
    postreqId String
    prereqId  String
    postreq   Course   @relation(name: "post", fields: [postreqId], references: [id], onDelete: Cascade)
    prereq    Course   @relation(name: "pre", fields: [prereqId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@id([postreqId, prereqId])
    @@index([postreqId])
    @@index([prereqId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    programId     String?
    program       Program?    @relation(fields: [programId], references: [id], onDelete: Cascade)
    Curriculum    Curriculum?

    @@index([programId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum CourseStatus {
    taking
    failed
    passed
    incomplete
}
